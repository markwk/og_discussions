<?php

/**
 * @file
 * Code for the OG Discussion feature.
 */
include_once('og_discussions.features.inc');

/**
 * Implements hook_menu().
 */
function og_discussions_menu() {
  $items = array();

  $items['groups/%/discussions'] = array(
    'title callback' => 'og_discussions_forum_title',
    'title arguments' => array(1),
    'page callback' => 'og_discussions_forum_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  $items['groups/%/term/%taxonomy_term'] = array(
    'title callback' => 'og_discussions_term_title',
    'title arguments' => array(1, 3),
    'page callback' => 'og_discussions_term_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
  );
  return $items;
}
/**
 * Implements hook_menu().
 */
function og_discussions_init() {
  if (arg(0) == 'groups' && is_numeric(arg(1)) && arg(2) == 'discussions' && is_numeric(arg(3)) && arg(4) == '') {	
    $gid = arg(1);
    $tid = arg(3);
    $term = taxonomy_term_load($tid);
    $group = og_load($gid);
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t($group->label), 'node/' . $group->etid);
    $breadcrumb[] = l(t($group->label . ' Forum'), 'groups/' . $gid .'/discussions');
    $breadcrumb[] = l(t($term->name), 'groups/' . $gid .'/discussions/'. $tid);
    drupal_set_breadcrumb($breadcrumb);
  }
}
function og_discussions_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
	if ($node->type == 'og_discussion') {
	  $group = og_load($node->group_audience['und'][0]['gid']);
	  $breadcrumb = array();
	  $breadcrumb[] = l(t('Home'), NULL);
	  $breadcrumb[] = l(t($group->label), 'node/' . $group->etid);
	  $breadcrumb[] = l(t('Forums'), 'groups/' . $group->gid . '/discussions/');
	  $breadcrumb[] = l($node->field_forum_topic['und'][0]['taxonomy_term']->name, 'groups/' . $group->gid . '/discussions/' . $node->field_forum_topic['und'][0]['tid']);
	  $breadcrumb[] = l(t($node->title), 'node/' . $node->nid);
	  drupal_set_breadcrumb($breadcrumb);
	}
  }
  return $node;
}

/**
 * Return group forum overview page title
 * @param $gid
 *   group id
 * @return
 *   group forum overview title
 **/
function og_discussions_forum_title($gid) {
  $group = og_load($gid);
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t($group->label), 'node/' . $group->etid);
  $breadcrumb[] = l(t($group->label . ' Forums'), 'groups/' . $gid .'/discussions');
  drupal_set_breadcrumb($breadcrumb);
  return $group->label .' forum';	
}

/**
 * Return group term page title and set breadcrumb
 * @param $gid
 *   group id
 * @param $term
 *  term object
 * @return
 *   group term page title
 **/
function og_discussions_term_title($gid, $term) {
  $group = og_load($gid);
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t('Groups'), 'groups/' . $gid . '/discussions');
  $breadcrumb[] = l(t($term->name), 'groups/term/' . $gid .'/' . $term->tid);
  drupal_set_breadcrumb($breadcrumb);
  return $group->label .' '. $term->name;	
}

/**
 * Show forum overview page for groups
 * @param $gid
 *   group id
 **/
function og_discussions_forum_page($gid) {
  global $user;
  $group = og_load($gid);
  $terms = taxonomy_get_tree(6);
  $parents = array();
  $childrens = array(); 
  $output = '';
  foreach ($terms as $term) {
	if ($term->parents[0] == 0) {
	  $parents[$term->tid] = $term;
	}
	else {
	  $childrens[$term->parents[0]][$term->tid] = $term;
	}
  }
  foreach ($parents as $key => $parent) { 
	$title = '<h2 class="forum_title">' . $parent->name .' </h2>';
    $rows = array();
	if (!empty($childrens[$key])) {
	  foreach ($childrens[$key] as $tid => $child) {
		$row = array();
		$data = l($child->name, 'groups/'. $gid .'/discussions/'. $tid) . '<br><p>' . $child->description . '</p>';
        $thread_count = og_discussions_thread_count($gid, $tid);
        $post_count = og_discussions_post_count($gid, $tid);
        $post_details = 'Threads: ' . number_format($thread_count) . '<br>' . 'Posts: ' . number_format($post_count);
        $details = og_discussions_last_comment_statistics($gid, $tid);
        $last_comment = $details['last_reply'];
        $topics  = $details['topics'];
        $last_thread = $details['last_thread'];
        if (!empty($topics['0']->first_new) && $topics['0']->first_new) {
	      $newpost = '<span class="new-post">New</span>';
        }
        else {
 		  $newpost = '<span class="new-post"></span>';
        }
        if (!empty($last_comment->name)) {
	      $last_post = '<span class="last_post">Latest post by</span> ' . l($last_comment->name, 'user/' . $last_comment->uid) . '<br>';
          $last_post .= 'in ' . l($last_comment->title, 'node/' . $last_comment->nid) . '<br>';
          $last_post .= 'on ' . format_date($last_comment->created);
        }
        else if (!empty($last_thread->name)) {
	      $last_post = '<span class="last_post">Latest thread </span> ' . l(truncate_utf8($last_thread->title, 20, TRUE, TRUE), 'node/' . $last_thread->nid) . '<br>';
          $last_post .= 'by ' . l($last_thread->name, 'user/' . $last_thread->uid) . '<br>';
          $last_post .= 'on ' . format_date($last_thread->created);
        }
        else {
	      $last_post = '<span class="no_post">No recent activity.</span>';
        }

	    $row[] = array(
	      'data' => $newpost,
	      'class' => 'new_forum_post',  
	    );
	    $row[] = array(
	      'data' => $data,
	      'class' => 'forum_terms',  
	    );
        $row[] = array(
          'data' => $post_details,
          'class' => 'post_details',  
        );
        $row[] = array(
          'data' => $last_post,
          'class' => 'last_post_details',  
        );
		$rows[] = $row;
	  }

    }
    else {
	  $row = array();
	  $data =  l($parent->name, 'groups/' . $gid . '/discussions/' . $key) . '<br>' . $parent->description;
	  $thread_count = og_discussions_thread_count($gid, $key);
      $post_count = og_discussions_post_count($gid, $key);
      $post_details = 'Threads: ' . $thread_count . '<br>' . 'Posts: ' . $post_count;
      $last_comment = og_discussions_last_comment_statistics($gid, $key);
      $details = og_discussions_last_comment_statistics($gid, $key); 
      $last_comment = $details['last_reply'];
      $topics  = $details['topics'];
      $last_thread = $details['last_thread'];
      if (!empty($topics['0']->first_new) && $topics['0']->first_new) {
	      $newpost = '<span class="new-post">New</span>';
      }
      else {
		  $newpost = '<span class="new-post"></span>';
      }
      if (!empty($last_comment->name)) {
	    $last_post = '<span class="last_post">Latest post by</span> ' . l($last_comment->name, 'user/' . $last_comment->uid) . '<br>';
        $last_post .= 'in ' . l($last_comment->title, 'node/' . $last_comment->nid) . '<br>';
        $last_post .= 'on ' . format_date($last_comment->created);
      }
      else if (!empty($last_thread->name)) {
	      $last_post = '<span class="last_post">Latest thread </span> ' . l(truncate_utf8($last_thread->title, 20, TRUE, TRUE), 'node/' . $last_thread->nid) . '<br>';
          $last_post .= 'by ' . l($last_thread->name, 'user/' . $last_thread->uid) . '<br>';
          $last_post .= 'on ' . format_date($last_thread->created);
      }
      else {
	      $last_post = '<span class="no_post">No recent post.</span>';
      }
	  $row[] = array(
	    'data' => $newpost,
        'class' => 'new_forum_post', 
      );
	  $row[] = array(
	    'data' => $data,
	    'class' => 'forum_terms',  
	  );
	  $row[] = array(
        'data' => $post_details,
        'class' => 'post_details',  
      );
      $row[] = array(
        'data' => $last_post,
        'class' => 'last_post_details',  
      );
	  $rows[] = $row;
    }
    $output .= theme('table', array('header' => array(), 'rows' => $rows, 'caption' => $title));
  }
  return $output;
}

/**
 * Returns thread counts in forum topic
 * @param $gid
 *   group id
 * @param $tid
 *  forum topic term id
 **/
function og_discussions_thread_count($gid, $tid) {
  $query = db_select('taxonomy_index', 't');
  $query->join('field_data_group_audience', 'f', 'f.entity_id = t.nid');
  $query->addExpression('COUNT(*)');
  $query->condition('t.tid', $tid, '=');
  $query->condition('f.group_audience_gid', $gid, '=');
  $query->condition('f.bundle', "discussion", '=');
  return $query->execute()->fetchField();	
}

/**
 * Returns post counts in forum topic
 * @param $gid
 *   group id
 * @param $tid
 *  forum topic term id
 **/
function og_discussions_post_count($gid, $tid) {
  $query = db_select('taxonomy_index', 't');
  $query->join('field_data_group_audience', 'f', 'f.entity_id = t.nid');
  $query->fields('t', array('nid'));
  $query->condition('t.tid', $tid, '=');
  $query->condition('f.group_audience_gid', $gid, '=');
  $query->condition('f.bundle', "discussion", '=');
  $result = $query->execute();
  $comment_count = 0;
  foreach ($result as $record) {
   	$count = db_query('SELECT COUNT(cid) FROM {comment} WHERE nid = :nid', array(
      ':nid' => $record->nid,
      ))->fetchField();
    $comment_count = $comment_count + $count;
  }
  return $comment_count;	
}

/**
 * Returns post statistics
 * @param $gid
 *   group id
 * @param $tid
 *  forum topic term id
 **/
function og_discussions_last_comment_statistics($gid, $tid) {
  global $user;
  $query = db_select('taxonomy_index', 't');
  $query->join('field_data_group_audience', 'f', 'f.entity_id = t.nid');
  $query->fields('t', array('nid'));
  $query->condition('t.tid', $tid, '=');
  $query->condition('f.group_audience_gid', $gid, '=');
  $query->condition('f.bundle', "discussion", '=');
  $result = $query->execute();
  $nids = array();
  foreach ($result as $record) {
    $nids[] = $record->nid;
  }
  if ($nids) {
	$query = db_select('node', 'n');
    $query->fields('n', array('title', 'nid', 'type', 'sticky', 'created', 'uid'));
    $query->addField('n', 'comment', 'comment_mode');

    $query->join('node_comment_statistics', 'ncs', 'n.nid = ncs.nid');
    $query->fields('ncs', array('cid', 'last_comment_uid', 'last_comment_timestamp', 'comment_count'));

    $query->join('taxonomy_index', 't', 't.nid = ncs.nid');
    $query->addField('t', 'tid', 'forum_tid');
    
    $query->join('users', 'u', 'n.uid = u.uid');
    $query->addField('u', 'name');

    $query->join('users', 'u2', 'ncs.last_comment_uid = u2.uid');

    $query->addExpression('CASE ncs.last_comment_uid WHEN 0 THEN ncs.last_comment_name ELSE u2.name END', 'last_comment_name');

    $query->condition('n.nid', $nids);
    $query->orderBy('n.created', 'DESC');
    $result = $query->execute();
   }
   else {
     $result = array();	
   }
  $last_reply = new stdClass();
  $last_thread = new stdClass();
  $topics = array();
  $first_new_found = FALSE;
  $recent_thread = TRUE;
  foreach ($result as $topic) {
    if ($user->uid) {
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->forum_tid != $tid) {
        $topic->new = 0;
      }
      else {
        $history = _forum_user_last_visit($topic->nid);
        $topic->new_replies = comment_num_new($topic->nid, $history);
        $topic->new = $topic->new_replies || ($topic->last_comment_timestamp > $history);
      }
    }
    else {
      // Do not track "new replies" status for topics if the user is anonymous.
      $topic->new_replies = 0;
      $topic->new = 0;
    }

    // Make sure only one topic is indicated as the first new topic.
    $topic->first_new = FALSE;
    if ($topic->new != 0 && !$first_new_found) {
      $topic->first_new = TRUE;
      $first_new_found = TRUE;
      $topics[] = $topic;
    }
    if ($topic->comment_count > 0) {
      $last_reply->created = $topic->last_comment_timestamp;
      $last_reply->name = $topic->last_comment_name;
      $last_reply->uid = $topic->last_comment_uid;
      $last_reply->title = $topic->title;
      $last_reply->nid  = $topic->nid;
    }
    if ($recent_thread) {
	  $recent_thread = FALSE;
	  $last_thread->created = $topic->created;
      $last_thread->name = $topic->name;
      $last_thread->uid = $topic->uid;
      $last_thread->title = $topic->title;
      $last_thread->nid  = $topic->nid;
    }
  }
  $details['topics'] = $topics;
  $details['last_reply'] = $last_reply;
  $details['last_thread'] = $last_thread;
  return $details;
}
/**
 * Menu callback; displays all nodes associated with a groups group term.
 *
 * @param $gid
 *   The group id.
 * @param $term
 *   The taxonomy term.
 * @return
 *   The page content.
 */
function og_discussions_term_page($gid, $term) {
  $build = array();

   $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => og_discussions_term_view($term, 'full', NULL, $gid),
  ); 

  if ($nids = og_discussions_select_nodes($term->tid, $gid, TRUE, variable_get('default_nodes_main', 10))) {
    $nodes = node_load_multiple($nids);
    $build += node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
     );
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    );
  }
  return $build;
}
/**
 * Implements hook_field_attach_view_alter().
 * TODO: FIX Field Output to redirect to forum
function og_discussions_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if (!empty($element['#field_name'])) {
      if ($element['#field_name'] == 'field_forum_topic') {
        // Here we alter href attribute.
        $element[1]['#href'] = 'groups/' . $element['#object']->group_audience['und'][0]['gid'] . '/term' . $element['#items'][1]['tid'];
      }
    }
  }
}
 */
/**
 * Generate an array for rendering the given term.
 *
 * @param $term
 *   A term object.
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function og_discussions_term_view($term, $view_mode = 'full', $langcode = NULL, $gid) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $build = array(
    '#theme' => 'group_taxonomy_term',
    '#term' => $term,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
    '#group_id' => $gid,
  );

  // Add term description if the term has one.
  if (!empty($term->description)) {
    $build['description'] = array(
      '#markup' => check_markup($term->description, $term->format, '', TRUE),
      '#weight' => 0,
      '#prefix' => '<div class="taxonomy-term-description">',
      '#suffix' => '</div>',
    );
  }
  return $build;
}
/**
 * Implements hook_theme().
 */
function og_discussions_theme() {
  return array(
    'group_taxonomy_term' => array(
      'render element' => 'elements',
      'template' => 'group-taxonomy-term',
    ),
  );
}
/**
 * Process variables for group-taxonomy-term.tpl.php.
 */
function template_preprocess_group_taxonomy_term(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['term'] = $variables['elements']['#term'];
  $term = $variables['term'];
  $variables['term_url']  = url('groups/term/' . $variables['elements']['#group_id'] . '/'. $term->tid);
  $variables['term_name'] = check_plain($term->name);
  $variables['page']      = $variables['view_mode'] == 'full' ? 1 : 0;
  // Flatten the term object's member fields.
  $variables = array_merge((array) $term, $variables);
  // Helpful $content variable for templates.
  $variables['content'] = array();
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
/**
 * Return nodes attached to a group term across all field instances.
 *
 * @param $tid
 *   The term ID.
 * @param $pager
 *   Boolean to indicate whether a pager should be used.
 * @param $limit
 *   Integer. The maximum number of nodes to find.
 *   Set to FALSE for no limit.
 * @order
 *   An array of fields and directions.
 *
 * @return
 *   An array of nids matching the query.
 */
function og_discussions_select_nodes($tid, $gid, $pager = TRUE, $limit = FALSE, $order = array('t.sticky' => 'DESC', 't.created' => 'DESC')) {
  if (!variable_get('taxonomy_maintain_index_table', TRUE)) {
    return array();
  }
  $query = db_select('taxonomy_index', 't');
  $query->join('field_data_group_audience', 'f', 'f.entity_id = t.nid');
  $query->addTag('node_access');
  $query->condition('tid', $tid);
  $query->condition('f.group_audience_gid', $gid, '=');
  if ($pager) {
    $count_query = clone $query;
    $count_query->addExpression('COUNT(t.nid)');

    $query = $query->extend('PagerDefault');
    if ($limit !== FALSE) {
      $query = $query->limit($limit);
    }
    $query->setCountQuery($count_query);
  }
  else {
    if ($limit !== FALSE) {
      $query->range(0, $limit);
    }
  }
  $query->addField('t', 'nid');
  $query->addField('t', 'tid');
  foreach ($order as $field => $direction) {
    $query->orderBy($field, $direction);
    list($table_alias, $name) = explode('.', $field);
    $query->addField($table_alias, $name);
  }
  return $query->execute()->fetchCol();
}